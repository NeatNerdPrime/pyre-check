(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{145:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var r=n(2),o=n(10),a=(n(0),n(173)),i={id:"guided-tour",title:"Guided Tour",sidebar_label:"Guided Tour"},c={id:"guided-tour",title:"Guided Tour",description:"First Steps",source:"@site/../docs/guided_tour.md",permalink:"/docs/guided-tour",sidebar_label:"Guided Tour",sidebar:"overview",previous:{title:"Installing Pyre",permalink:"/docs/installation"},next:{title:"Configuring Pyre",permalink:"/docs/configuration"}},l=[{value:"First Steps",id:"first-steps",children:[]},{value:"Running a Server",id:"running-a-server",children:[]},{value:"Configuring your Setup",id:"configuring-your-setup",children:[]},{value:"Using pyre-upgrade",id:"using-pyre-upgrade",children:[]},{value:"Using pyre infer",id:"using-pyre-infer",children:[]}],p={rightToc:l};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"first-steps"},"First Steps"),Object(a.b)("p",null,"Assuming you have completed your setup (see ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/installation"}),"Installation"),"), you're now ready to\nuse Pyre. The following will give a short overview of the basic workflows that we recommend."),Object(a.b)("p",null,"In the most basic case you have a ",Object(a.b)("inlineCode",{parentName:"p"},"test")," directory containing a ",Object(a.b)("inlineCode",{parentName:"p"},"test.py")," file."),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ cat test/test.py\ndef foo() -> int:\n  return 'string'  # whoops\n")),Object(a.b)("p",null,"You can run pyre as follows"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ pyre --source-directory test check\n \u019b Found 1 type error!\n test/test.py:2:4 Incompatible return type [7]: Expected `int` but got `str`.\n")),Object(a.b)("p",null,"The default for ",Object(a.b)("inlineCode",{parentName:"p"},"--source-directory")," is the current directory. In most cases you will simply"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ cd test\n$ pyre check\n \u019b Found 1 type error!\n test.py:2:4 Incompatible return type [7]: Expected `int` but got `str`.\n")),Object(a.b)("p",null,"Invoked with ",Object(a.b)("inlineCode",{parentName:"p"},"check"),", Pyre will do a complete pass over all the files in the provided directory.\nAs your codebase grows, this will get slower and slower. Pyre supports incremental type checking\nwhich we'll cover in the next section."),Object(a.b)("h2",{id:"running-a-server"},"Running a Server"),Object(a.b)("p",null,"Pyre's incremental mode depends on ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://facebook.github.io/watchman/docs/install.html"}),"Watchman"),"\nto get notifications about changes on the filesystem. Without watchman, or an editor supporting LSP,\nyou cannot use Pyre's incremental mode."),Object(a.b)("p",null,"If you have ",Object(a.b)("em",{parentName:"p"},"Watchman")," installed and assuming the scenario from the previous section, you can start\na server with"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ cd test\n$ pyre\n \u019b Found 1 type error!\n test.py:2:4 Incompatible return type [7]: Expected `int` but got `str`.\n")),Object(a.b)("p",null,"The initial run will spawn the server. Subsequent calls to ",Object(a.b)("inlineCode",{parentName:"p"},"pyre")," will simply query the server for\nchanges and will be much faster than the initial request. The server can be stopped with\n",Object(a.b)("inlineCode",{parentName:"p"},"pyre stop"),"."),Object(a.b)("h2",{id:"configuring-your-setup"},"Configuring your Setup"),Object(a.b)("p",null,"Pyre's configuration typically sits at the root of the repository in ",Object(a.b)("inlineCode",{parentName:"p"},".pyre_configuration"),".\nYou can override that configuration locally to set up your own default target to check."),Object(a.b)("p",null,"Running"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ pyre init\n")),Object(a.b)("p",null,"from your project root will set up your ",Object(a.b)("inlineCode",{parentName:"p"},".pyre_configuration"),", but you may want to override\nthe source-directories field in projects within that root, so you can easily run pyre on\ndifferent sets of default paths. Once you have a configuration file, you can run pyre with\nno extra parameters:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-bash"}),"$ pyre check\n")),Object(a.b)("p",null,"See ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/configuration"}),"Configuring Pyre")," for examples and\nadditional configuration settings."),Object(a.b)("h2",{id:"using-pyre-upgrade"},"Using pyre-upgrade"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"pyre-upgrade")," is a tool to help you convert files to use ",Object(a.b)("inlineCode",{parentName:"p"},"# pyre-strict"),". You can use it\nto automatically add ",Object(a.b)("inlineCode",{parentName:"p"},"fixmes")," to errors in the code, and help you improve strict coverage as you go."),Object(a.b)("p",null,"Steps"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"# pyre-strict")," to the toplevel of your files"),Object(a.b)("li",{parentName:"ol"},"Run ",Object(a.b)("inlineCode",{parentName:"li"},"pyre --output=json | pyre-upgrade fixme")," to automatically add fixmes to all new errors")),Object(a.b)("h2",{id:"using-pyre-infer"},"Using pyre infer"),Object(a.b)("p",null,"Pyre infer helps you generate stubs and add annotations to your code. To generate stubs, simply run"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"pyre infer")),Object(a.b)("p",null,"to automatically add these annotations to your code, run"),Object(a.b)("p",null,Object(a.b)("inlineCode",{parentName:"p"},"pyre infer -i")))}u.isMDXComponent=!0},173:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return y}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),u=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=u(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=u(n),d=r,y=s["".concat(i,".").concat(d)]||s[d]||b[d]||a;return n?o.a.createElement(y,c(c({ref:t},p),{},{components:n})):o.a.createElement(y,c({ref:t},p))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<a;p++)i[p]=n[p];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);