(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{159:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return p})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(2),a=t(10),o=(t(0),t(171)),p={id:"querying-pyre",title:"Querying Pyre",sidebar_label:"Querying Pyre"},i={id:"querying-pyre",title:"Querying Pyre",description:"Pyre has a subcommand called query allows you to hook into a Pyre server and get type-related",source:"@site/../docs/querying_pyre.md",permalink:"/docs/querying-pyre",sidebar_label:"Querying Pyre",sidebar:"overview",previous:{title:"See Pyre Errors In Your Editor",permalink:"/docs/lsp-integration"},next:{title:"Overview",permalink:"/docs/pysa-basics"}},s=[{value:"Attributes",id:"attributes",children:[]},{value:"Dump call graph",id:"dump-call-graph",children:[]},{value:"Dump class hierarchy",id:"dump-class-hierarchy",children:[]},{value:"Join",id:"join",children:[]},{value:"Less or equal",id:"less-or-equal",children:[]},{value:"Meet",id:"meet",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Normalize type",id:"normalize-type",children:[]},{value:"Signature",id:"signature",children:[]},{value:"Superclasses",id:"superclasses",children:[]},{value:"Type",id:"type",children:[]},{value:"Type at position",id:"type-at-position",children:[]},{value:"Types in file",id:"types-in-file",children:[]}],l={rightToc:s};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Pyre has a subcommand called ",Object(o.b)("inlineCode",{parentName:"p"},"query")," allows you to hook into a Pyre server and get type-related\ninformation without having to run a full type check."),Object(o.b)("p",null,"This allows you, for instance, to get the type of an expression at a certain line and column, check whether a type is a subtype or the other or get the list of methods for a class."),Object(o.b)("p",null,"To get started, set up a server with ",Object(o.b)("inlineCode",{parentName:"p"},"pyre")," or ",Object(o.b)("inlineCode",{parentName:"p"},"pyre start"),". The rest of this page goes through the various query options with examples."),Object(o.b)("p",null,"Note: The responses in the examples are prettified using the ",Object(o.b)("inlineCode",{parentName:"p"},"pyre query <query> | python -m json.tool")," pattern."),Object(o.b)("h2",{id:"attributes"},"Attributes"),Object(o.b)("p",null,"This command gives you the list of attributes for a class."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'# a.py\nclass C:\n    a: int = 2\n    def foo(self) -> str:\n        return ""\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "attributes(a.C)"\n{\n    "response": {\n        "attributes": [\n            {\n                "annotation": "int",\n                "name": "a"\n            },\n            {\n                "annotation": "typing.Callable(a.C.foo)[[], str]",\n                "name": "foo"\n            }\n        ]\n    }\n}\n')),Object(o.b)("h2",{id:"dump-call-graph"},"Dump call graph"),Object(o.b)("p",null,"The command ",Object(o.b)("inlineCode",{parentName:"p"},"dump_call_graph()")," returns a comprehensive JSON mapping each call to a list of callees."),Object(o.b)("h2",{id:"dump-class-hierarchy"},"Dump class hierarchy"),Object(o.b)("p",null,"The command ",Object(o.b)("inlineCode",{parentName:"p"},"dump_class_hierarchy()")," returns the entire class hierarchy as Pyre understands it; elides type variables."),Object(o.b)("h2",{id:"join"},"Join"),Object(o.b)("p",null,"This command uses Pyre's type engine to find a common superclass for two types."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "join(typing.Iterable[int], typing.Iterable[str])"\n{\n    "response": {\n        "type": "typing.Iterable[typing.Union[int, str]]"\n    }\n}\n')),Object(o.b)("h2",{id:"less-or-equal"},"Less or equal"),Object(o.b)("p",null,"This command returns whether the type on the left can be used when the type on the right is expected."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"# a.py\nclass C:\n  pass\n\nclass D(C):\n  pass\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "less_or_equal(a.D, a.C)"\n{"response":{"boolean":true}}\n\n$ pyre query "less_or_equal(a.C, a.D)"\n{"response":{"boolean":true}}\n')),Object(o.b)("h2",{id:"meet"},"Meet"),Object(o.b)("p",null,"This command uses Pyre's type engine to find a common subclass for two types."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "meet(typing.Iterable[int], typing.Iterable[typing.Union[int, str]])"\n{\n    "response": {\n        "type": "typing.Iterable[int]"\n    }\n}\n')),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("p",null,"This command returns the list of methods for a type, excluding inherited ones."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'# a.py\nclass C:\n  def f(self, x: int) -> str:\n    return ""\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "methods(a.C)"\n{\n    "response": {\n        "methods": [\n            {\n                "name": "foo",\n                "parameters": [\n                    "self",\n                    "int"\n                ],\n                "return_annotation": "str"\n            }\n        ]\n    }\n}\n')),Object(o.b)("h2",{id:"normalize-type"},"Normalize type"),Object(o.b)("p",null,"This command resolves type aliases for a given type."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"# a.py\nA = typing.Union[int, str]\nB = typing.Union[A, typing.List[str]]\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "normalize_type(a.B)"\n{\n    "response": {\n        "type": "typing.Union[typing.List[int], int, str]"\n    }\n}\n')),Object(o.b)("h2",{id:"signature"},"Signature"),Object(o.b)("p",null,"Returns the type signature of a function."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"# a.py\ndef foo(x: int) -> str:\n  ...\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "signature(a.foo)"\n{\n    "response": {\n        "signature": [\n            {\n                "parameters": [\n                    {\n                        "annotation": "int",\n                        "parameter_name": "x"\n                    }\n                ],\n                "return_type": "str"\n            }\n        ]\n    }\n}\n')),Object(o.b)("h2",{id:"superclasses"},"Superclasses"),Object(o.b)("p",null,"Displays the superclasses of a given class name."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "superclasses(int)"\n{\n    "response": {\n        "superclasses": [\n            "float",\n            "complex",\n            "numbers.Integral",\n            "numbers.Rational",\n            "numbers.Real",\n            "numbers.Complex",\n            "numbers.Number",\n            "typing.SupportsFloat",\n            "typing.Any"\n        ]\n    }\n}\n')),Object(o.b)("h2",{id:"type"},"Type"),Object(o.b)("p",null,"Evaluates the type of the given expression."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "type([1 + 2, \'\'])"\n{\n    "response": {\n        "type": "typing.List[typing.Union[int, str]]"\n    }\n}\n')),Object(o.b)("h2",{id:"type-at-position"},"Type at position"),Object(o.b)("p",null,"This command returns the type of the symbol at the provided position."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"# a.py\nvariable = 2\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "type_at_position(\'a.py\', 1, 2)"\n{\n    "response": {\n        "annotation": "int",\n        "location": {\n            "path": "a.py",\n            "start": {\n                "column": 0,\n                "line": 1\n            },\n            "stop": {\n                "column": 8,\n                "line": 1\n            }\n        }\n    }\n}\n')),Object(o.b)("h2",{id:"types-in-file"},"Types in file"),Object(o.b)("p",null,"This command returns all the types for a file that Pyre has been able to resolve."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'# a.py\nclass C:\n  attribute = ""\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),'$ pyre query "types(path=\'a.py\')"\n{\n    "response": [\n        {\n            "path": "a.py",\n            "types": [\n                {\n                    "annotation": "str",\n                    "location": {\n                        "path": "a.py",\n                        "start": {\n                            "column": 16,\n                            "line": 2\n                        },\n                        "stop": {\n                            "column": 18,\n                            "line": 2\n                        }\n                    }\n                },\n                {\n                    "annotation": "str",\n                    "location": {\n                        "path": "a.py",\n                        "start": {\n                            "column": 4,\n                            "line": 2\n                        },\n                        "stop": {\n                            "column": 13,\n                            "line": 2\n                        }\n                    }\n                },\n                {\n                    "annotation": "typing.Type[a.C]",\n                    "location": {\n                        "path": "a.py",\n                        "start": {\n                            "column": 4,\n                            "line": 2\n                        },\n                        "stop": {\n                            "column": 13,\n                            "line": 2\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n}\n')))}c.isMDXComponent=!0},171:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),c=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},b=function(e){var n=c(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},y=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=c(t),y=r,d=b["".concat(p,".").concat(y)]||b[y]||u[y]||o;return t?a.a.createElement(d,i(i({ref:n},l),{},{components:t})):a.a.createElement(d,i({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,p=new Array(o);p[0]=y;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=t[l];return a.a.createElement.apply(null,p)}return a.a.createElement.apply(null,t)}y.displayName="MDXCreateElement"}}]);