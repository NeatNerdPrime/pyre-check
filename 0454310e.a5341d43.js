(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{144:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return l})),r.d(t,"default",(function(){return p}));var n=r(2),a=r(10),o=(r(0),r(173)),i={id:"overview",title:"Overview",sidebar_label:"Overview"},c={id:"overview",title:"Overview",description:"Pyre is a performant type checker for Python. Statically typing what are",source:"@site/../docs/overview.md",permalink:"/docs/overview",sidebar_label:"Overview",sidebar:"overview",next:{title:"Installing Pyre",permalink:"/docs/installation"}},l=[{value:"Why Types?",id:"why-types",children:[]},{value:"Getting Started",id:"getting-started",children:[]}],s={rightToc:l};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Pyre is a performant type checker for Python. Statically typing what are\nessentially fully dynamic languages has a long tradition at Facebook.\nWe've done this for PHP with ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://hacklang.org/"}),"Hack")," and for Javascript\nwith ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://flow.org/"}),"Flow"),"."),Object(o.b)("h2",{id:"why-types"},"Why Types?"),Object(o.b)("p",null,"We believe statically typing what are essentially fully dynamic languages\ngives our code stability and improves developer productivity. Type errors are\ndangerous and sometimes difficult to track down, depending on the complexity\nof the program. Pyre allows us to check the source before we run the program\nand to fix our code accordingly."),Object(o.b)("h2",{id:"getting-started"},"Getting Started"),Object(o.b)("p",null,"See the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/installation"}),"Installation")," section for how to set up Pyre on your\nmachine. If you already have a Pyre installation, you can take the\n",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/guided-tour"}),"Guided Tour")," to familiarize yourself the basic workflows\nthat we recommend."),Object(o.b)("p",null,"The ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/configuration"}),"Configuring Pyre")," section contains information\non how to customize Pyre to work with your own projects. You can tune Pyre in\na number of different ways, depending on how strict you want to be with your\ntypes, and how performant you want Pyre to be when run against your source base."),Object(o.b)("p",null,"Pyre includes a number of key features, described in these pages:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/gradual-typing"}),"Gradual Typing")," - Not every expression is typed. Pyre\nallows users to explicitly specify how strict the type checking should be\non a per-file basis."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/error-suppression"}),"Error Suppression")," - Pyre will suppress specified\nerrors, depending on configuration."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/error-types"}),"Error Types")," - Pyre identifies a number of different error\ntypes including incompatible variables, behavioral subtyping, missing\nattributes, and much more."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/lsp-integration"}),"Editor Integration")," - Pyre integrates with VS Code and\nNuclide."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/watchman-integration"}),"Watchman Integration")," - Allows for incremental\ntypechecking using terminal editors such as Vim or Emacs.")))}p.isMDXComponent=!0},173:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),p=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=p(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},y=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),y=n,d=u["".concat(i,".").concat(y)]||u[y]||b[y]||o;return r?a.a.createElement(d,c(c({ref:t},s),{},{components:r})):a.a.createElement(d,c({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=y;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,r)}y.displayName="MDXCreateElement"}}]);